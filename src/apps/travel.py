from sentence_transformers import SentenceTransformer
from langchain_community.graphs import Neo4jGraph
import pymystem3
import spacy

import sys
import os

root_rel_path = "./src" if os.getenv("ENVIROMENT") == "plain" else "./"
root_path = os.path.abspath(root_rel_path)
sys.path.insert(0, root_path)

from pecai.agents.travel import agent as travel_agent
from pecai.elements.llm import yandex
from pecai.elements import tg_bot
from pecai.elements import log

logger = log.getLogger(__name__)

greetings_message = (
    """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–≥–æ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º! üåç‚úàÔ∏è –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è, —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —É–≥–æ–ª–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –∏–ª–∏ –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è! –ù–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? üåÜ –°–µ–π—á–∞—Å —è —Å–ø–µ—Ü –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É! –ê –µ—â–µ —è –∑–Ω–∞—é –∫–∞–∫ —É—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–æ–±—ã—á–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–æ —Å–ª–µ–¥–∞–º –î–∞–Ω–∏–ª—ã –∏–∑ —Ñ—Ä–∞–Ω—à–∏–∑—ã "–ë—Ä–∞—Ç"."""
    """
–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ç–µ–º—ã:
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
‚≠êÔ∏è–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è / –µ–¥–∞ / –æ—Ç–¥—ã—Ö
    """
    """
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Ñ—Ä–∞–∑–æ–π "—Å–ø–ª–∞–Ω–∏—Ä—É–π –ø–æ–µ–∑–∫—É –≤ –ü–∏—Ç–µ—Ä"!üöÄ
"""
)

examples = [
    "–°–ø–ª–∞–Ω–∏—Ä—É–π –ø–æ–µ–∑–¥–∫—É –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
    "–ì–¥–µ –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?",
    "–ì–¥–µ —Ä–∞–∑–≤–ª–µ—á—å—Å—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?",
    '–ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–æ–±—ã—Ç–∏—è —Ñ–∏–ª—å–º–∞ "–ë—Ä–∞—Ç"?',
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –°–ø–∞—Å –Ω–∞ –ö—Ä–æ–≤–∏",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ê–ø—Ä–∞–∫—Å–∏–Ω –¥–≤–æ—Ä",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ¬´–ü–æ–¥–ø–∏—Å–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è¬ª",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ü–∞–≤–ª–æ–≤—Å–∫",
]

help_text = f"–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å:\n+ {'\n+ '.join(examples)}"


config = {
    "neo4j": {
        "url": os.getenv("NEO4J_URL"),
        "username": os.getenv("NEO4J_USERNAME"),
        "password": os.getenv("NEO4J_PASSWORD"),
    },
    "telegram": {
        "bot_token": os.getenv("TG_BOT_TOKEN"),
        "bot_root": os.getenv("TG_BOT_ROOT"),
    },
    "yandex": {
        "folder_id": os.getenv("YANDEX_FOLDER_ID"),
        "service_account_id": os.getenv("YANDEX_SERVICE_ACCOUNT_ID"),
        "key_file": os.getenv("YANDEX_KEY_FILE"),
    },
    "models": {
        "spacy_model": os.getenv("SPACY_MODEL"),
        "embeddings_model": os.getenv("EMBEDDINGS_MODEL_MODEL"),
    },
}


def main():
    logger.debug(config)

    graph = Neo4jGraph(
        url=config["neo4j"]["url"],
        username=config["neo4j"]["username"],
        password=config["neo4j"]["password"],
    )
    nlp = spacy.load(config["models"]["spacy_model"])
    lem = pymystem3.Mystem()

    llm = yandex.YaLLM(
        api=yandex.YaGPTAPI(
            folder_id=config["yandex"]["folder_id"],
            service_account_id=config["yandex"]["service_account_id"],
            key_file=config["yandex"]["key_file"],
        )
    )

    embeddings_model = SentenceTransformer(config["models"]["embeddings_model"])

    bot = tg_bot.BotAgent(
        config["telegram"]["bot_token"],
        config["telegram"]["bot_root"],
        greetings_message,
        help_text,
        travel_agent.Agent(graph, lem, nlp, llm, embeddings_model=embeddings_model),
    )
    bot.start()


if __name__ == "__main__":
    main()
